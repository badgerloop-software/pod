/* 
 * Please note that this is an auto-generated file which is automatically generated whenever a target is built.
 */

#ifndef __DATA_H__
#define __DATA_H__

#include <stdint.h>
#include <time.h>
#include <pthread.h>
#include <stdbool.h>
#define TIME_SINCE_LAST_RETRO 15000000
#define FILTER_NONE     0
#define FILTER_ROLLING  1
#define FILTER_EXP      2

/* Filters */
float rollingAvgFloat(float *vals, int windowSize);
int rollingAvgInt(int *vals, int windowSize);
float expFilterFloat(float currVal, float prevVal, float weight);
int expFilterInt(int currVal, int prevVal, float weight);

int initMetaData(void);
int isEarlyInit(void);


/* Autogenerated Code Begins */
int initData(void);
int initPressureData(void);
int initMotionData(void);
int initBmsData(void);
int initRmsData(void);
int initFlagData(void);
int initTimerData(void);

// Top of the great hierarchy of our descending data tree.
typedef struct data_t {
	pthread_mutex_t dataMutex;
	int state;
	// Pressure information from the braking system
	struct pressure_t *pressure;
	// Where all motion data goes. X-positive direction is assumed. All values should be assumed to be metr
	// ic.
	struct motion_t *motion;
	// Data collected about the battery system
	struct bms_t *bms;
	// Collection of all the RMS (motor controller) data
	struct rms_t *rms;
	// Where information about the flags is held.
	struct flags_t *flags;
	// For making sure that our run happens in a timely manner
	struct timers_t *timers;
} data_t;

// Pressure information from the braking system
typedef struct pressure_t {
	pthread_mutex_t pressureMutex;
	double primTank;
	double primLine;
	double primAct;
	double secTank;
	double secLine;
	double secAct;
	double amb;
	double pv;
} pressure_t;

// Where all motion data goes. X-positive direction is assumed. All values should be assumed to be metr
// ic.
typedef struct motion_t {
	pthread_mutex_t motionMutex;
	float pos;
	float vel;
	float accel;
	int retroCount;
	int missedRetro;
} motion_t;

// Data collected about the battery system
typedef struct bms_t {
	pthread_mutex_t bmsMutex;
	float packCurrent;
	float packVoltage;
	int imdStatus;
	uint16_t packDCL;
	int16_t packCCL;
	uint16_t packResistance;
	uint8_t packHealth;
	float packOpenVoltage;
	uint16_t packCycles;
	uint16_t packAh;
	float inputVoltage;
	uint8_t Soc;
	uint16_t relayStatus;
	uint8_t highTemp;
	uint8_t lowTemp;
	uint8_t avgTemp;
	float cellMaxVoltage;
	float cellMinVoltage;
	uint16_t cellAvgVoltage;
	uint8_t maxCells;
	uint8_t numCells;
} bms_t;

// Collection of all the RMS (motor controller) data
typedef struct rms_t {
	pthread_mutex_t rmsMutex;
	uint16_t igbtTemp;
	uint16_t gateDriverBoardTemp;
	uint16_t controlBoardTemp;
	uint16_t motorTemp;
	int16_t motorSpeed;
	int16_t phaseACurrent;
	uint16_t phaseBCurrent;
	uint16_t phaseCCurrent;
	int16_t dcBusVoltage;
	uint16_t lvVoltage;
	uint64_t canCode1;
	uint64_t canCode2;
	uint64_t faultCode1;
	uint64_t faultCode2;
	int16_t commandedTorque;
	int16_t actualTorque;
	uint16_t relayState;
	uint16_t electricalFreq;
	int16_t dcBusCurrent;
	uint16_t outputVoltageLn;
	uint16_t VSMCode;
	uint16_t keyMode;
} rms_t;

// Where information about the flags is held.
typedef struct flags_t {
	pthread_mutex_t flagsMutex;
	int readyPump;
	int pumpDown;
	int readyCommand;
	bool readyToBrake;
	int propulse;
	int emergencyBrake;
	int shouldStop;
	int shutdown;
	bool shouldBrake;
	bool isConnected;
	bool brakeInit;
	bool brakePrimAct;
	bool brakeSecAct;
	bool brakePrimRetr;
	bool brakeSecRetr;
	bool clrMotionData;
} flags_t;

// For making sure that our run happens in a timely manner
typedef struct timers_t {
	pthread_mutex_t timersMutex;
	uint64_t startTime;
	uint64_t oldRetro;
	uint64_t lastRetro;
	uint64_t lastRetros[3];
	uint64_t crawlTimer;
} timers_t;


int getDataState();
void setDataState(int val);

double getPressurePrimTank();
void setPressurePrimTank(double val);

double getPressurePrimLine();
void setPressurePrimLine(double val);

double getPressurePrimAct();
void setPressurePrimAct(double val);

double getPressureSecTank();
void setPressureSecTank(double val);

double getPressureSecLine();
void setPressureSecLine(double val);

double getPressureSecAct();
void setPressureSecAct(double val);

double getPressureAmb();
void setPressureAmb(double val);

double getPressurePv();
void setPressurePv(double val);

float getMotionPos();
void setMotionPos(float val);

float getMotionVel();
void setMotionVel(float val);

float getMotionAccel();
void setMotionAccel(float val);

int getMotionRetroCount();
void setMotionRetroCount(int val);

int getMotionMissedRetro();
void setMotionMissedRetro(int val);

float getBmsPackCurrent();
void setBmsPackCurrent(float val);

float getBmsPackVoltage();
void setBmsPackVoltage(float val);

int getBmsImdStatus();
void setBmsImdStatus(int val);

uint16_t getBmsPackDCL();
void setBmsPackDCL(uint16_t val);

int16_t getBmsPackCCL();
void setBmsPackCCL(int16_t val);

uint16_t getBmsPackResistance();
void setBmsPackResistance(uint16_t val);

uint8_t getBmsPackHealth();
void setBmsPackHealth(uint8_t val);

float getBmsPackOpenVoltage();
void setBmsPackOpenVoltage(float val);

uint16_t getBmsPackCycles();
void setBmsPackCycles(uint16_t val);

uint16_t getBmsPackAh();
void setBmsPackAh(uint16_t val);

float getBmsInputVoltage();
void setBmsInputVoltage(float val);

uint8_t getBmsSoc();
void setBmsSoc(uint8_t val);

uint16_t getBmsRelayStatus();
void setBmsRelayStatus(uint16_t val);

uint8_t getBmsHighTemp();
void setBmsHighTemp(uint8_t val);

uint8_t getBmsLowTemp();
void setBmsLowTemp(uint8_t val);

uint8_t getBmsAvgTemp();
void setBmsAvgTemp(uint8_t val);

float getBmsCellMaxVoltage();
void setBmsCellMaxVoltage(float val);

float getBmsCellMinVoltage();
void setBmsCellMinVoltage(float val);

uint16_t getBmsCellAvgVoltage();
void setBmsCellAvgVoltage(uint16_t val);

uint8_t getBmsMaxCells();
void setBmsMaxCells(uint8_t val);

uint8_t getBmsNumCells();
void setBmsNumCells(uint8_t val);

uint16_t getRmsIgbtTemp();
void setRmsIgbtTemp(uint16_t val);

uint16_t getRmsGateDriverBoardTemp();
void setRmsGateDriverBoardTemp(uint16_t val);

uint16_t getRmsControlBoardTemp();
void setRmsControlBoardTemp(uint16_t val);

uint16_t getRmsMotorTemp();
void setRmsMotorTemp(uint16_t val);

int16_t getRmsMotorSpeed();
void setRmsMotorSpeed(int16_t val);

int16_t getRmsPhaseACurrent();
void setRmsPhaseACurrent(int16_t val);

uint16_t getRmsPhaseBCurrent();
void setRmsPhaseBCurrent(uint16_t val);

uint16_t getRmsPhaseCCurrent();
void setRmsPhaseCCurrent(uint16_t val);

int16_t getRmsDcBusVoltage();
void setRmsDcBusVoltage(int16_t val);

uint16_t getRmsLvVoltage();
void setRmsLvVoltage(uint16_t val);

uint64_t getRmsCanCode1();
void setRmsCanCode1(uint64_t val);

uint64_t getRmsCanCode2();
void setRmsCanCode2(uint64_t val);

uint64_t getRmsFaultCode1();
void setRmsFaultCode1(uint64_t val);

uint64_t getRmsFaultCode2();
void setRmsFaultCode2(uint64_t val);

int16_t getRmsCommandedTorque();
void setRmsCommandedTorque(int16_t val);

int16_t getRmsActualTorque();
void setRmsActualTorque(int16_t val);

uint16_t getRmsRelayState();
void setRmsRelayState(uint16_t val);

uint16_t getRmsElectricalFreq();
void setRmsElectricalFreq(uint16_t val);

int16_t getRmsDcBusCurrent();
void setRmsDcBusCurrent(int16_t val);

uint16_t getRmsOutputVoltageLn();
void setRmsOutputVoltageLn(uint16_t val);

uint16_t getRmsVSMCode();
void setRmsVSMCode(uint16_t val);

uint16_t getRmsKeyMode();
void setRmsKeyMode(uint16_t val);

int getFlagsReadyPump();
void setFlagsReadyPump(int val);

int getFlagsPumpDown();
void setFlagsPumpDown(int val);

int getFlagsReadyCommand();
void setFlagsReadyCommand(int val);

bool getFlagsReadyToBrake();
void setFlagsReadyToBrake(bool val);

int getFlagsPropulse();
void setFlagsPropulse(int val);

int getFlagsEmergencyBrake();
void setFlagsEmergencyBrake(int val);

int getFlagsShouldStop();
void setFlagsShouldStop(int val);

int getFlagsShutdown();
void setFlagsShutdown(int val);

bool getFlagsShouldBrake();
void setFlagsShouldBrake(bool val);

bool getFlagsIsConnected();
void setFlagsIsConnected(bool val);

bool getFlagsBrakeInit();
void setFlagsBrakeInit(bool val);

bool getFlagsBrakePrimAct();
void setFlagsBrakePrimAct(bool val);

bool getFlagsBrakeSecAct();
void setFlagsBrakeSecAct(bool val);

bool getFlagsBrakePrimRetr();
void setFlagsBrakePrimRetr(bool val);

bool getFlagsBrakeSecRetr();
void setFlagsBrakeSecRetr(bool val);

bool getFlagsClrMotionData();
void setFlagsClrMotionData(bool val);

uint64_t getTimersStartTime();
void setTimersStartTime(uint64_t val);

uint64_t getTimersOldRetro();
void setTimersOldRetro(uint64_t val);

uint64_t getTimersLastRetro();
void setTimersLastRetro(uint64_t val);

uint64_t getTimersLastRetros(int index);
void setTimersLastRetros(uint64_t val, int index);

uint64_t getTimersCrawlTimer();
void setTimersCrawlTimer(uint64_t val);
/* Autogenerated Code Ends */


static inline uint64_t convertTouS(struct timespec *currTime) {
    return (uint64_t)((currTime->tv_sec * 1000000) + (currTime->tv_nsec / 1000));
}

static inline uint64_t getuSTimestamp() {
    struct timespec _temp;
    clock_gettime(CLOCK_MONOTONIC, &_temp);
    uint64_t _tempTs = convertTouS(&_temp);
    return _tempTs;
}

static inline uint64_t getSTimestamp() {
    struct timespec temp;
    clock_gettime(CLOCK_MONOTONIC, &temp);
    return (uint64_t) (temp.tv_sec);
}

extern data_t *data;
#endif